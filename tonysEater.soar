############################ Move-north operator ############################
# Propose*move-north:
# If I exist, then propose the move-north operator.
#
# Apply*move-north:
# If the move-north operator is selected, then generate an output command to
# move north.
# sp {propose*move-north
#     (state <s> ^type state)
# -->
#     (<s> ^operator <o> +)
#     (<o> ^name move-north)
# }
# sp {apply*move-north
#     (state <s> ^operator.name move-north
#                ^io.output-link <out>)
# -->
#     (<out> ^move.direction north)
# }

# If I exist and my location has changed, then propose the move-north operator
# sp {propose*move-north-changed
#     (state <s> ^io.input-link.eater <eater>)
#     (<eater> ^x <x> ^y <y>)
# -->
#     (<s> ^operator.name move-north +)
# }

# Apply*move-north*remove-move:
# If the move-north operator is selected,
# and there is a completed move command on the output link,
# then remove that command.
# sp {apply*move-north*remove
#     (state <s> ^operator.name move-north
#                ^io.output-link <out>)
#     (<out> ^move <move>)
#     (<move> ^status complete)
# -->
#     (<out> ^move <move> -)
# }


########################## Move-to-food operator ############################
# Propose*move-to-food*normalfood
# If there is normalfood in an adjacent cell,
# propose move-to-food in the direction of that cell
# and indicate that this operator can be selected randomly.
#
# Propose*move-to-food*bonusfood
# If there is bonusfood in an adjacent cell,
# propose move-to-food in the direction of that cell
# and indicate that this operator can be selected randomly.
#
# Apply*move-to-food
# If the move-to-food operator for a direction is selected,
# generate an output command to move in that direction.
#
# Apply*move-to-food*remove-move:
# If the move-to-food operator is selected,
# and there is a completed move command on the output link,
# then remove that command.
# sp {propose*move-to-food-normalfood
#     (state <s> ^io.input-link.my-location <location>)
#     (<location> ^<direction>.content normalfood)
# -->
#     (<s> ^operator <o> + =)
#     (<o> ^name move-to-food <move> 
#          ^direction <direction>)
# }
# sp {propose*move-to-food-bonusfood
#     (state <s> ^io.input-link.my-location <location>)
#     (<location> ^<direction>.content bonusfood)
# -->
#     (<s> ^operator <o> + =)
#     (<o> ^name move-to-food
#          ^direction <direction>)
# }
# sp {apply*move-to-food
#     (state <s> ^io.output-link <out>
#                ^operator (^name move-to-food
#                           ^direction <dir>))
# -->
#     (<out> ^move.direction <dir>)
# }
# sp {apply*move-to-food-remove
#     (state <s> ^operator.name move-to-food
#                ^io.output-link <out>)
#     (<out> ^move <move>)
#     (<move> ^status complete)
# -->
#     (<out> ^move <move> -)
# }

# sp {propose*move-to-food
#     (state <s> ^io.input-link.my-location <location>)
#     (<location> ^<direction>.content {<type> << normalfood bonusfood >> })
# -->
#     (write (crlf) | Propose move | <direction> |, for | <type>)
#     (<s> ^operator <o> + =)
#     (<o> ^name move-to-food <move> 
#          ^direction <direction>)
# }

# sp {monitor*move-to-food
#     (state <s> ^operator <o>)
#     (<o> ^name move-to-food
#          ^direction <dir>)
# -->
#     (write |Move direction: | <dir>)
# }


# Propose*move*1:
# If there is normalfood, bonusfood, eater, or empty (not wall) in an adjacent cell,
# propose move in the direction of that cell, with the cell’s content,
# and indicate that this operator can be selected randomly.
sp {propose*move*naive
    (state <s> ^io.input-link <input>)                               
    (<input> ^my-location.<direction>.content 
           # { <content> << normalfood bonusfood eater empty >> }
             { <content> <> wall })
-->
    (write (crlf) | Propose move | <direction> |, for | <content>)
    (<s> ^operator <o> + =)
    (<o> ^name move
         ^direction <direction>
         ^content <content>)
}

# sp {apply*move
#     (state <s> ^io.output-link <out>
#                ^operator (^name move
#                           ^direction <dir>))
# -->
#     (<out> ^move.direction <dir>)
# }
# sp {apply*move-remove
#     (state <s> ^operator.name move
#                ^io.output-link <out>)
#     (<out> ^move <move>)
#     (<move> ^status complete)
# -->
#     (<out> ^move <move> -)
# }

sp {monitor*move
    (state <s> ^operator <o>)
    (<o> ^name move
         ^direction <dir>)
-->
    (write |Move direction: | <dir>)
}

# Select*move*bonusfood-better-than-normalfood
# If there is a proposed operator to move to a cell with bonusfood and
# there is a second proposed operator to move to a cell that is empty or
# has normalfood or another eater
# prefer the first operator.
sp {select*move-prefer-bonus
    (state <s> ^operator <o1> +
               ^operator <o2> +)
    (<o1> ^name { <name> << move jump >> }
          ^content bonusfood)
    (<o2> ^name <name>
          ^content << empty normalfood eater >>)
-->
    (<s> ^operator <o1> > <o2>)
}

# Select*move*avoid-empty-eater
# If there is a proposed operator to move to an empty cell or a cell with
# another eater,
# then avoid that operator.
sp {select*move*avoid-empty
    (state <s> ^operator <o> +)
    (<o> ^name << move jump >>
         ^content << empty eater >>)
-->
    (<s> ^operator <o> <)
}
sp {select*move*prefer-normalfood
    (state <s> ^operator <o> +)
    (<o> ^name << move jump >>
         ^content normalfood)
-->
    (<s> ^operator <o> >)
}

sp {initialize*directions
    (state <s> ^type state)
-->
    (<s> ^directions <n> <s> <e> <w>)
    (<n> ^value north ^opposite south)
    (<s> ^value south ^opposite north)
    (<e> ^value east ^opposite west)
    (<w> ^value west ^opposite east)
}

# Apply*move*create*last-direction
# If the move operator for a direction is selected,
# create an augmentation called last-direction with that direction.
sp {apply*move*remember*previous-direction
    (state <s> ^operator <o>)
    (<o> ^name move
         ^direction <dir>)
-->
    (<s> ^prev-dir <dir>)
}

# Apply*move*remove*last-direction
# If the move operator for a direction is selected,
# and the last-direction is not equal to that direction,
# then remove the last-direction.
sp {apply*move*remove*prev-opposite-dir
    (state <s> ^operator <o>
               ^prev-dir <prev-dir>)
    (<o> ^name move
         ^direction <> <prev-dir>)
-->
    (<s> ^prev-dir <prev-dir> -)
}

# Propose*move*no-backward:
# If there is normalfood, bonusfood, eater, or empty in an adjacent cell,
# and there is no last direction equal to the opposite direction for that
# cell,
# propose move in the direction of that cell, with the cell’s content,
# and indicate that this operator can be selected randomly.
# sp {propose*move*no-backward
#     (state <s> ^io.input-link <input>
#                ^directions <directions>
#               -^prev-dir <opp-dir>)
#     (<input> ^my-location.<current-dir>.content { <content> <> wall })
#     (<directions> ^value <current-dir>
#                   ^opposite <opp-dir>)
# -->
#     (write (crlf) | Propose move | <current-dir> |, for | <content>)
#     (<s> ^operator <o> + =)
#     (<o> ^name move
#          ^direction <current-dir>
#          ^content <content>)
# }

# Select*move*reject*backward
# If there is a proposed operator to move in the direction
# opposite the last move,
# reject that operator.
sp {select*move*reject*backward
    (state <s> ^operator <o> +
               ^prev-dir <last-move>
               ^directions <directions>)
    (<o> ^name move
         ^direction <move-direction>)
    (<directions> ^value <move-direction>
                  ^opposite <last-move>)
-->
(<s> ^operator <o> -)
}

# Propose*jump:
# If the content of a cell two steps away in a direction is not a wall,
# propose jump in the direction of that cell, with the cell’s content,
# and indicate that this operator can be selected randomly.
sp {propose*jump
    (state <s> ^io.input-link.<direction>.<direction>.content { <content> <> wall })
-->
    (write (crlf) |Propose jump | <direction> |, for | <content>)
    (<s> ^operator <o> + =)
    (<o> ^name jump
         ^direction <direction>
         ^content <content>)
}

# Apply*move*jump
# If the move or jump operator for a direction is selected,
# generate an output name to move in that direction.
sp {apply*move*jump
    (state <s> ^operator <o>
               ^io.output-link <out>)
    (<o> ^name { <action> << move jump >> }
         ^direction <direction>)
-->
    (<out> ^<action>.direction <direction>)
}

# Apply*move*jump*remove-name:
# If the move or jump operator is selected,
# and there is a completed action (<name>) on the output link,
# then remove that name.
sp {apply*move*jump*remove
    (state <s> ^operator <o>
               ^io.output-link <out>)
    (<o> ^name { <action> << move jump >> })
    (<out> ^<action> (^status complete))
-->
    (<out> ^<action> <name> -)
}

sp {select*jump*bonus*better-than*move*empty
    (state <s> ^operator <o1> +
               ^operator <o2> +)
    (<o1> ^name jump
          ^content bonusfood)
    (<o2> ^name move
          ^content empty)
-->
    (<s> ^operator <o1> > <o2>)
}
